name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/flask-app

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('devsecops-pipeline/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd devsecops-pipeline
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest

    - name: Code formatting with Black
      run: |
        cd devsecops-pipeline
        black --exclude="examples/" .

    - name: Import sorting with isort
      run: |
        cd devsecops-pipeline
        isort --skip-glob="examples/*" .

    - name: Check if formatting changed files
      run: |
        if ! git diff --quiet; then
          echo "⚠️  Code formatting changes detected!"
          echo "📝 The following files were auto-formatted:"
          git diff --name-only
          echo ""
          echo "💡 To avoid this in the future, run these commands locally before committing:"
          echo "   cd devsecops-pipeline"
          echo "   black --exclude='examples/' ."
          echo "   isort --skip-glob='examples/*' ."
          echo ""
          echo "✅ Files have been automatically formatted and will be committed."
        else
          echo "✅ No formatting changes needed - code is already properly formatted!"
        fi

    - name: Commit formatting changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add devsecops-pipeline/
        git diff --staged --quiet || git commit -m "Auto-format code with Black and isort [skip ci]"
        git push || true

    - name: Lint with flake8
      run: |
        cd devsecops-pipeline
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=examples/
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=examples/

    - name: Run unit tests
      run: |
        cd devsecops-pipeline
        python -m pytest test_app.py test_vulnerable_code.py -v --tb=short --ignore=examples/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  sast-sonarcloud:
    name: SAST - SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd devsecops-pipeline
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest

    - name: Run tests with coverage
      run: |
        cd devsecops-pipeline
        coverage run -m pytest test_app.py test_vulnerable_code.py --ignore=examples/
        coverage xml

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      with:
        projectBaseDir: devsecops-pipeline

    - name: Upload SonarCloud results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sonarcloud-results
        path: devsecops-pipeline/.scannerwork/

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd devsecops-pipeline
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install cyclonedx-bom

    - name: Generate Python SBOM
      run: |
        cd devsecops-pipeline
        cyclonedx-py requirements -o sbom-python.json

    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-cyclonedx
        path: devsecops-pipeline/sbom-python.json

  sca-trivy:
    name: SCA - Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: sbom-generation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download SBOM artifact
      uses: actions/download-artifact@v4
      with:
        name: sbom-cyclonedx
        path: ./

    - name: Run Trivy SBOM vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'sbom'
        scan-ref: 'sbom-python.json'
        format: 'sarif'
        output: 'trivy-sca-results.sarif'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        exit-code: '0'  # Don't fail here, we'll check manually

    - name: Run Trivy filesystem scan as backup
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'devsecops-pipeline'
        format: 'json'
        output: 'trivy-fs-results.json'
        severity: 'MEDIUM,HIGH,CRITICAL'
        exit-code: '0'

    - name: Generate Trivy table report for PR comment
      if: github.event_name == 'pull_request'
      run: |
        echo "📦 Generating table report for PR comment..."
        
        # Install trivy if not available
        if ! command -v trivy &> /dev/null; then
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.45.0
        fi
        
        # Generate table format for PR comment
        echo "## SBOM Vulnerability Scan Results" > trivy-table-report.txt
        trivy sbom sbom-python.json --format table --severity HIGH,CRITICAL >> trivy-table-report.txt 2>/dev/null || echo "No SBOM vulnerabilities found" >> trivy-table-report.txt
        
        echo "" >> trivy-table-report.txt
        echo "## Filesystem Vulnerability Scan Results" >> trivy-table-report.txt
        trivy fs devsecops-pipeline --format table --severity HIGH,CRITICAL >> trivy-table-report.txt 2>/dev/null || echo "No filesystem vulnerabilities found" >> trivy-table-report.txt

    - name: Check for vulnerabilities and set outputs
      id: vuln-check
      run: |
        echo "🔍 Analyzing Trivy scan results..."
        
        # Check SBOM scan results
        if [ -f "trivy-sca-results.sarif" ]; then
          SBOM_VULNS=$(jq '.runs[0].results | length' trivy-sca-results.sarif 2>/dev/null || echo "0")
          echo "📦 SBOM scan found: $SBOM_VULNS vulnerabilities"
        else
          SBOM_VULNS=0
        fi
        
        # Check filesystem scan results
        if [ -f "trivy-fs-results.json" ]; then
          FS_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy-fs-results.json 2>/dev/null || echo "0")
          echo "📁 Filesystem scan found: $FS_VULNS high/critical vulnerabilities"
        else
          FS_VULNS=0
        fi
        
        TOTAL_VULNS=$((SBOM_VULNS + FS_VULNS))
        echo "🚨 Total vulnerabilities requiring attention: $TOTAL_VULNS"
        
        # Set outputs for PR comment
        echo "total_vulns=$TOTAL_VULNS" >> $GITHUB_OUTPUT
        echo "sbom_vulns=$SBOM_VULNS" >> $GITHUB_OUTPUT
        echo "fs_vulns=$FS_VULNS" >> $GITHUB_OUTPUT
        
        if [ "$TOTAL_VULNS" -gt 0 ]; then
          echo ""
          echo "❌ Vulnerabilities found! Will comment on PR and fail the build."
          echo "📋 Please review the security scan results and remediate before merging."
          echo "has_vulns=true" >> $GITHUB_OUTPUT
        else
          echo ""
          echo "✅ No vulnerabilities found! Build can proceed."
          echo "has_vulns=false" >> $GITHUB_OUTPUT
        fi

    - name: Comment on PR with vulnerability results
      if: github.event_name == 'pull_request' && steps.vuln-check.outputs.has_vulns == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the table report
          let tableReport = '';
          try {
            tableReport = fs.readFileSync('trivy-table-report.txt', 'utf8');
          } catch (error) {
            tableReport = 'Could not read detailed vulnerability report.';
          }
          
          const totalVulns = '${{ steps.vuln-check.outputs.total_vulns }}';
          const sbomVulns = '${{ steps.vuln-check.outputs.sbom_vulns }}';
          const fsVulns = '${{ steps.vuln-check.outputs.fs_vulns }}';
          
          const body = `## 🚨 Security Vulnerability Alert
          
          **⚠️ Critical/High severity vulnerabilities detected in this PR!**
          
          ### Summary
          - 📦 **SBOM Scan**: ${sbomVulns} vulnerabilities found
          - 📁 **Filesystem Scan**: ${fsVulns} vulnerabilities found  
          - 🚨 **Total**: ${totalVulns} vulnerabilities requiring attention
          
          ### Detailed Results
          
          \`\`\`
          ${tableReport}
          \`\`\`
          
          ### Next Steps
          1. 🔍 Review the vulnerabilities listed above
          2. 📋 Check the **Security** tab for SARIF reports with more details
          3. 🛠️ Update dependencies to patched versions if available
          4. 🔒 Consider alternative packages if no patches are available
          5. 📝 Document any accepted risks with justification
          
          **This PR cannot be merged until vulnerabilities are resolved or properly documented as accepted risks.**
          
          ---
          *Generated by Trivy SCA scan in workflow: \`${{ github.workflow }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Fail build if vulnerabilities found
      if: steps.vuln-check.outputs.has_vulns == 'true'
      run: |
        echo "❌ Build failed due to security vulnerabilities!"
        echo "📋 Check the PR comment and Security tab for details."
        exit 1

    - name: Upload Trivy SCA results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-sca-results.sarif

    - name: Upload Trivy SCA results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-sca-results
        path: |
          trivy-sca-results.sarif
          trivy-fs-results.json
          trivy-table-report.txt
          sbom-python.json

  dockerfile-scan:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint Dockerfile Linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: devsecops-pipeline/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Run Trivy Dockerfile scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'devsecops-pipeline/Dockerfile'
        format: 'sarif'
        output: 'trivy-dockerfile-results.sarif'

    - name: Upload Hadolint results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

    - name: Upload Trivy Dockerfile results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-dockerfile-results.sarif

    - name: Upload Dockerfile scan results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dockerfile-scan-results
        path: |
          hadolint-results.sarif
          trivy-dockerfile-results.sarif

  build-and-scan:
    name: Build & Scan Container
    runs-on: ubuntu-latest
    needs: [sast-sonarcloud, sca-trivy, dockerfile-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: devsecops-pipeline
        platforms: linux/amd64,linux/arm64
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Scout vulnerability scan
      if: github.event_name != 'pull_request'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sarif-file: scout-results.sarif
        summary: true

    - name: Upload Docker Scout results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-results
        path: |
          trivy-results.sarif
          scout-results.sarif

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: devsecops-pipeline
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-sonarcloud, sca-trivy, dockerfile-scan, build-and-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-reports

    - name: Display security scan summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pipeline Status:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Lint & Test**: ${{ needs.lint-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **SAST (SonarCloud)**: ${{ needs.sast-sonarcloud.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- � **SBOM Generation**: ${{ needs.sbom-generation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- �📦 **SCA (Trivy)**: ${{ needs.sca-trivy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐋 **Dockerfile Scan**: ${{ needs.dockerfile-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 **Container Scan**: ${{ needs.build-and-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Reports:" >> $GITHUB_STEP_SUMMARY
        echo "Security scan results have been uploaded to the GitHub Security tab." >> $GITHUB_STEP_SUMMARY
        echo "Check the **Security** tab in your repository for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY

    - name: Upload consolidated security reports
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-security-reports
        path: security-reports/
