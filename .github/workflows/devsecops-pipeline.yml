name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/flask-app

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('devsecops-pipeline/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd devsecops-pipeline
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest

    - name: Code formatting with Black
      run: |
        cd devsecops-pipeline
        black --exclude="examples/" .

    - name: Import sorting with isort
      run: |
        cd devsecops-pipeline
        isort --skip-glob="examples/*" .

    - name: Check if formatting changed files
      run: |
        if ! git diff --quiet; then
          echo "⚠️  Code formatting changes detected!"
          echo "📝 The following files were auto-formatted:"
          git diff --name-only
          echo ""
          echo "💡 To avoid this in the future, run these commands locally before committing:"
          echo "   cd devsecops-pipeline"
          echo "   black --exclude='examples/' ."
          echo "   isort --skip-glob='examples/*' ."
          echo ""
          echo "✅ Files have been automatically formatted and will be committed."
        else
          echo "✅ No formatting changes needed - code is already properly formatted!"
        fi

    - name: Commit formatting changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add devsecops-pipeline/
        git diff --staged --quiet || git commit -m "Auto-format code with Black and isort [skip ci]"
        git push || true

    - name: Lint with flake8
      run: |
        cd devsecops-pipeline
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=examples/
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=examples/

    - name: Run unit tests
      run: |
        cd devsecops-pipeline
        python -m pytest test_app.py -v --tb=short --ignore=examples/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  sast-sonarcloud:
    name: SAST - SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd devsecops-pipeline
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest

    - name: Run tests with coverage
      run: |
        cd devsecops-pipeline
        coverage run -m pytest test_app.py --ignore=examples/
        coverage xml

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      with:
        projectBaseDir: devsecops-pipeline

    - name: Upload SonarCloud results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sonarcloud-results
        path: devsecops-pipeline/.scannerwork/

  sca-snyk:
    name: SCA - Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd devsecops-pipeline
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=devsecops-pipeline/requirements.txt

    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

    - name: Upload Snyk results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-results
        path: snyk.sarif

  dockerfile-scan:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint Dockerfile Linter
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: devsecops-pipeline/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Run Trivy Dockerfile scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'devsecops-pipeline/Dockerfile'
        format: 'sarif'
        output: 'trivy-dockerfile-results.sarif'

    - name: Run Snyk Dockerfile scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: python:3.11-slim
        args: --file=devsecops-pipeline/Dockerfile --severity-threshold=medium

    - name: Upload Hadolint results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

    - name: Upload Trivy Dockerfile results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: trivy-dockerfile-results.sarif

    - name: Upload Dockerfile scan results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dockerfile-scan-results
        path: |
          hadolint-results.sarif
          trivy-dockerfile-results.sarif

  build-and-scan:
    name: Build & Scan Container
    runs-on: ubuntu-latest
    needs: [sast-sonarcloud, sca-snyk, dockerfile-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: devsecops-pipeline
        platforms: linux/amd64,linux/arm64
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Scout vulnerability scan
      if: github.event_name != 'pull_request'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sarif-file: scout-results.sarif
        summary: true

    - name: Upload Docker Scout results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-scan-results
        path: |
          trivy-results.sarif
          scout-results.sarif

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: devsecops-pipeline
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-sonarcloud, sca-snyk, dockerfile-scan, build-and-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-reports

    - name: Display security scan summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pipeline Status:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Lint & Test**: ${{ needs.lint-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **SAST (SonarCloud)**: ${{ needs.sast-sonarcloud.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 **SCA (Snyk)**: ${{ needs.sca-snyk.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- � **Dockerfile Scan**: ${{ needs.dockerfile-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- �🐳 **Container Scan**: ${{ needs.build-and-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Reports:" >> $GITHUB_STEP_SUMMARY
        echo "Security scan results have been uploaded to the GitHub Security tab." >> $GITHUB_STEP_SUMMARY
        echo "Check the **Security** tab in your repository for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY

    - name: Upload consolidated security reports
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-security-reports
        path: security-reports/
